#!/usr/bin/env ruby

option = ARGV[0]

$rscroot = "/usr/local/specto/resource"

require 'fileutils'
require 'launchy'
require '/usr/local/lib/specto/spectojuvale.rb'
#$LOAD_PATH.unshift(File.dirname("/usr/local/lib/specto/*"))

FileUtils.mkdir_p $rscroot

#GUI = "gui"
GUI = "g"
CUI = "cui"

=begin
def openurl(url, option)
  case option
  when GUI
    Launchy.open url
  when CUI
    system "lynx #{url}"
  else
    abort "option invalid"
  end
end

=end


KEYS_COMMAND = "specto [category] ... enlist possible hyperlinks "
CAT_COMMAND = "specto [lc] ... enlist categories "
PUSH_COMAND = "specto add [category] [key] [url]   ... add [key][value] type bookmarks (not random)"
CALL_COMMAND = "specto [category] [key] [output=\"cui/gui\"] .. obtain the url related to the key you registered"
DEL_COMMAND = "specto [rmc] [category] ... delete category"

def listkeys(ci)
  file = "#{$rscroot}/#{SpectoJuvare.category(ci)}"
  puts ">> #{file}"
  arr = SpectoJuvare.file_to_array file
  puts "---keys---"
  arr.each { |line|

    linesp = line.strip.chomp.split(' ')
    puts " "+linesp[0]
  }
  puts "----------"
end

def showHelp()
  puts "========== SPECTO =========== "
  puts
  puts KEYS_COMMAND
  puts CAT_COMMAND
  puts PUSH_COMAND
  puts CALL_COMMAND
  puts DEL_COMMAND
  puts
end

def doaddop(categoryindex, pi1, pi2)
  def validate(argsize, message)
    if ARGV.size < argsize
      abort "==> "+message
    end
  end

  validate(3, PUSH_COMAND)

  key = ARGV[pi1]
  value = ARGV[pi2]
  sententia = "#{key} #{value}"

  tmp = Hash.new
  target = SpectoJuvare.getFile(SpectoJuvare.category(categoryindex))

  def concat(tmp, key, value):String
    if tmp.has_key? key
      tmp[key] + "," + value
    else
      value
    end
  end

  File.open(target, "r").each do |line|
    lsp = line.split(" ")
    #if tmp.has_key? lsp[0]
      #tmp[lsp[0]] = tmp[lsp[0]] + "," + lsp[1]
    #  concat tmp, lsp[0], lsp[1]
    #else
    #  tmp[lsp[0]] = lsp[1]
    #end
    tmp[lsp[0]] =  concat tmp, lsp[0], lsp[1]
  end

  tmp[key] = concat tmp, key, value

  f = File.open(SpectoJuvare.getFile(SpectoJuvare.category(categoryindex)), "w")
  tmp.keys.each do |eachkey|
    f.puts "#{eachkey} #{tmp[eachkey]}"
  end
  f.close

end

case option
  when "-h", "help", "h", ""
    showHelp
when "add"
    doaddop 1, 2, 3
when "lc" # list categories
  system "ls #{$rscroot}"
when "rmc"
  system "rm #{$rscroot}/#{SpectoJuvare.category(1)}"
else
  # ./specto category = list keys sub category
  # ./specto category key = call

  if ARGV.size < 1
   showHelp()
   #abort "argument is not sufficiently provided. " + CALL_COMMAND
  end
  if ARGV.size == 1
   listkeys(0)
   abort
  end

  key = ARGV[1]
  if key == "add"
    doaddop 0, 2, 3
    abort ""
  end

  category = SpectoJuvare.category(0)

  file = "#{$rscroot}/#{category}"

  puts file

  lines = SpectoJuvare.file_to_array file
  lines.each{ |line|
    linesp = line.strip.chomp.split(' ')
    if linesp[0] == key
      SpectoJuvare.openurl linesp[1], SpectoJuvare.get_option(ARGV[2])
    end
  }
end



